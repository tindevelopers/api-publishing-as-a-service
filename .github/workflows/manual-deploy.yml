name: Manual Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      image_tag:
        description: 'Docker image tag to deploy'
        required: true
        default: 'latest'
        type: string
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: false
        type: boolean

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: us-central1
  SERVICE_NAME: api-publishing-service
  REGISTRY: gcr.io

jobs:
  validate-inputs:
    name: Validate Inputs
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.validate.outputs.environment }}
      image_tag: ${{ steps.validate.outputs.image_tag }}
      force_deploy: ${{ steps.validate.outputs.force_deploy }}
    
    steps:
    - name: Validate inputs
      id: validate
      run: |
        echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
        echo "image_tag=${{ github.event.inputs.image_tag }}" >> $GITHUB_OUTPUT
        echo "force_deploy=${{ github.event.inputs.force_deploy }}" >> $GITHUB_OUTPUT
        
        # Validate environment
        if [[ "${{ github.event.inputs.environment }}" != "staging" && "${{ github.event.inputs.environment }}" != "production" ]]; then
          echo "‚ùå Invalid environment. Must be 'staging' or 'production'"
          exit 1
        fi
        
        # Validate image tag
        if [[ -z "${{ github.event.inputs.image_tag }}" ]]; then
          echo "‚ùå Image tag cannot be empty"
          exit 1
        fi
        
        echo "‚úÖ Inputs validated successfully"

  quick-test:
    name: Quick Test
    runs-on: ubuntu-latest
    if: ${{ !github.event.inputs.force_deploy }}
    needs: validate-inputs
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run quick tests
      run: |
        pytest tests/ -k "not slow" --maxfail=5

  deploy:
    name: Deploy to ${{ needs.validate-inputs.outputs.environment }}
    runs-on: ubuntu-latest
    needs: [validate-inputs, quick-test]
    if: always() && (needs.quick-test.result == 'success' || needs.validate-inputs.outputs.force_deploy == 'true')
    environment: ${{ needs.validate-inputs.outputs.environment }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Deploy to Cloud Run
      run: |
        ENV_SUFFIX=""
        if [[ "${{ needs.validate-inputs.outputs.environment }}" == "staging" ]]; then
          ENV_SUFFIX="-staging"
        fi
        
        SERVICE_NAME="${{ env.SERVICE_NAME }}$ENV_SUFFIX"
        
        # Set environment-specific configurations
        if [[ "${{ needs.validate-inputs.outputs.environment }}" == "production" ]]; then
          MEMORY="2Gi"
          CPU="2"
          MIN_INSTANCES="1"
          MAX_INSTANCES="20"
          ENV_VARS="ENVIRONMENT=production,LOG_LEVEL=INFO"
        else
          MEMORY="1Gi"
          CPU="1"
          MIN_INSTANCES="0"
          MAX_INSTANCES="5"
          ENV_VARS="ENVIRONMENT=staging,LOG_LEVEL=DEBUG"
        fi
        
        echo "üöÄ Deploying to ${{ needs.validate-inputs.outputs.environment }} environment"
        echo "Service: $SERVICE_NAME"
        echo "Image: ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ needs.validate-inputs.outputs.image_tag }}"
        
        gcloud run deploy $SERVICE_NAME \
          --image ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ needs.validate-inputs.outputs.image_tag }} \
          --region ${{ env.REGION }} \
          --platform managed \
          --allow-unauthenticated \
          --port 8080 \
          --memory $MEMORY \
          --cpu $CPU \
          --min-instances $MIN_INSTANCES \
          --max-instances $MAX_INSTANCES \
          --concurrency 80 \
          --timeout 300 \
          --set-env-vars $ENV_VARS \
          --set-secrets SECRET_KEY=api-secret-key:latest \
          --set-secrets WEBFLOW_API_KEY=webflow-api-key:latest \
          --set-secrets WORDPRESS_SITE_URL=wordpress-site-url:latest \
          --set-secrets WORDPRESS_APP_PASSWORD=wordpress-app-password:latest

    - name: Get service URL
      id: service-url
      run: |
        ENV_SUFFIX=""
        if [[ "${{ needs.validate-inputs.outputs.environment }}" == "staging" ]]; then
          ENV_SUFFIX="-staging"
        fi
        
        SERVICE_NAME="${{ env.SERVICE_NAME }}$ENV_SUFFIX"
        SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --region=${{ env.REGION }} --format="value(status.url)")
        echo "url=$SERVICE_URL" >> $GITHUB_OUTPUT
        echo "üåê Service URL: $SERVICE_URL"

    - name: Run health check
      run: |
        echo "üîç Running health check..."
        curl -f "${{ steps.service-url.outputs.url }}/health" || exit 1
        echo "‚úÖ Health check passed"

    - name: Run smoke tests
      run: |
        echo "üß™ Running smoke tests..."
        
        # Test basic endpoints
        curl -f "${{ steps.service-url.outputs.url }}/health/ready" || exit 1
        curl -f "${{ steps.service-url.outputs.url }}/health/live" || exit 1
        curl -f "${{ steps.service-url.outputs.url }}/platforms" || exit 1
        
        echo "‚úÖ Smoke tests passed"

    - name: Deployment summary
      run: |
        echo "## üéâ Deployment Successful!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Environment:** ${{ needs.validate-inputs.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
        echo "**Image Tag:** ${{ needs.validate-inputs.outputs.image_tag }}" >> $GITHUB_STEP_SUMMARY
        echo "**Service URL:** ${{ steps.service-url.outputs.url }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üîó Quick Links" >> $GITHUB_STEP_SUMMARY
        echo "- [API Documentation](${{ steps.service-url.outputs.url }}/docs)" >> $GITHUB_STEP_SUMMARY
        echo "- [Health Check](${{ steps.service-url.outputs.url }}/health)" >> $GITHUB_STEP_SUMMARY
        echo "- [Metrics](${{ steps.service-url.outputs.url }}/metrics)" >> $GITHUB_STEP_SUMMARY

  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: failure() && needs.validate-inputs.outputs.environment == 'production'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Get previous revision
      id: previous-revision
      run: |
        PREVIOUS_REVISION=$(gcloud run revisions list --service=${{ env.SERVICE_NAME }} --region=${{ env.REGION }} --limit=2 --format="value(metadata.name)" | tail -n 1)
        echo "revision=$PREVIOUS_REVISION" >> $GITHUB_OUTPUT
        echo "üîÑ Previous revision: $PREVIOUS_REVISION"

    - name: Rollback to previous revision
      run: |
        echo "üö® Rolling back to previous revision..."
        gcloud run services update-traffic ${{ env.SERVICE_NAME }} \
          --to-revisions=${{ steps.previous-revision.outputs.revision }}=100 \
          --region=${{ env.REGION }}
        echo "‚úÖ Rollback completed"

    - name: Verify rollback
      run: |
        echo "üîç Verifying rollback..."
        SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} --region=${{ env.REGION }} --format="value(status.url)")
        curl -f "$SERVICE_URL/health" || exit 1
        echo "‚úÖ Rollback verification successful"
