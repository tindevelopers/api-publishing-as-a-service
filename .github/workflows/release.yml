name: Release Management

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: us-central1
  SERVICE_NAME: api-publishing-service
  REGISTRY: gcr.io

jobs:
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      changelog: ${{ steps.changelog.outputs.changelog }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION="${{ github.ref_name }}"
        fi
        
        # Remove 'v' prefix if present
        VERSION=${VERSION#v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "full_version=v$VERSION" >> $GITHUB_OUTPUT
        echo "📦 Version: $VERSION"

    - name: Generate changelog
      id: changelog
      run: |
        # Get the previous tag
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        if [[ -n "$PREVIOUS_TAG" ]]; then
          echo "📝 Generating changelog from $PREVIOUS_TAG to v${{ steps.version.outputs.version }}"
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD)
        else
          echo "📝 Generating initial changelog"
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" --reverse)
        fi
        
        # Save changelog to file
        echo "$CHANGELOG" > changelog.md
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Update version files
      run: |
        # Update VERSION file
        echo "${{ steps.version.outputs.version }}" > VERSION
        
        # Update app/__init__.py
        sed -i "s/__version__ = \".*\"/__version__ = \"${{ steps.version.outputs.version }}\"/" app/__init__.py
        
        # Update README.md badges
        sed -i "s/badge\/version-[^-]*-blue/badge\/version-${{ steps.version.outputs.version }}-blue/" README.md

    - name: Commit version updates
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add VERSION app/__init__.py README.md
        git commit -m "chore: bump version to ${{ steps.version.outputs.full_version }}" || exit 0

    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.full_version }}
        release_name: Release ${{ steps.version.outputs.full_version }}
        body: |
          ## 🚀 API Publishing as a Service ${{ steps.version.outputs.full_version }}
          
          ### 📋 What's New
          ${{ steps.changelog.outputs.changelog }}
          
          ### 🔗 Quick Links
          - **API Documentation**: https://api-publishing-service-xxx-uc.a.run.app/docs
          - **Health Check**: https://api-publishing-service-xxx-uc.a.run.app/health
          - **Metrics**: https://api-publishing-service-xxx-uc.a.run.app/metrics
          
          ### 🚀 Deployment
          This release is automatically deployed to Google Cloud Run.
          
          ### 📦 Installation
          ```bash
          # Clone the repository
          git clone https://github.com/tindevelopers/api-publishing-as-a-service.git
          cd api-publishing-as-a-service
          
          # Checkout the release
          git checkout ${{ steps.version.outputs.full_version }}
          
          # Deploy using Docker
          docker-compose -f docker-compose.prod.yml up -d
          ```
          
          ### 🔧 Configuration
          See the [README.md](README.md) for detailed configuration instructions.
          
          ### 📚 Documentation
          - [API Documentation](https://api-publishing-service-xxx-uc.a.run.app/docs)
          - [Docker Deployment Guide](DOCKER_DEPLOYMENT.md)
          - [Changelog](CHANGELOG.md)
        draft: false
        prerelease: false

  update-documentation:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: create-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Generate API documentation
      run: |
        # Generate OpenAPI schema
        python -c "
        from app.main import app
        import json
        with open('openapi.json', 'w') as f:
            json.dump(app.openapi(), f, indent=2)
        "

    - name: Update CHANGELOG.md
      run: |
        # Add new version to CHANGELOG.md
        VERSION="${{ needs.create-release.outputs.version }}"
        DATE=$(date +%Y-%m-%d)
        
        # Create new changelog entry
        cat > new_changelog_entry.md << EOF
        
        ## [$VERSION] - $DATE
        
        ### Added
        ${{ needs.create-release.outputs.changelog }}
        
        ### Changed
        - Updated version to $VERSION
        
        ### Fixed
        - Various bug fixes and improvements
        
        EOF
        
        # Insert at the beginning of CHANGELOG.md (after the header)
        sed -i "/^# Changelog$/r new_changelog_entry.md" CHANGELOG.md
        rm new_changelog_entry.md

    - name: Commit documentation updates
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add CHANGELOG.md openapi.json
        git commit -m "docs: update documentation for ${{ needs.create-release.outputs.full_version }}" || exit 0
        git push

  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [create-release, update-documentation]
    if: always()
    
    steps:
    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: |
          🎉 New Release: API Publishing as a Service ${{ needs.create-release.outputs.full_version }}
          
          📋 Changes:
          ${{ needs.create-release.outputs.changelog }}
          
          🔗 Release: https://github.com/tindevelopers/api-publishing-as-a-service/releases/tag/${{ needs.create-release.outputs.full_version }}
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

    - name: Notify Discord
      if: env.DISCORD_WEBHOOK
      run: |
        curl -H "Content-Type: application/json" \
             -d '{
               "embeds": [{
                 "title": "🎉 New Release: API Publishing as a Service ${{ needs.create-release.outputs.full_version }}",
                 "description": "A new version has been released!",
                 "color": 3066993,
                 "fields": [
                   {
                     "name": "Version",
                     "value": "${{ needs.create-release.outputs.full_version }}",
                     "inline": true
                   },
                   {
                     "name": "Changes",
                     "value": "${{ needs.create-release.outputs.changelog }}",
                     "inline": false
                   }
                 ],
                 "footer": {
                   "text": "API Publishing as a Service"
                 },
                 "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%S.000Z)'"
               }]
             }' \
             ${{ secrets.DISCORD_WEBHOOK }}
